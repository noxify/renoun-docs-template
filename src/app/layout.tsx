import type { Metadata } from "next"

import "./globals.css"

import { Suspense } from "react"
import { CollectionInfo } from "@/collections"
import { Navbar } from "@/components/main-navbar"
import { SiteSidebar } from "@/components/sidebar"
import { TailwindIndicator } from "@/components/tailwind-indicator"
import { ThemeProvider } from "@/components/theme-provider"
import { PackageInstallScript } from "renoun/components"

// import { isDirectory, isFile } from "renoun/file-system"

export const metadata: Metadata = {
  title: {
    default: "renoun docs template",
    template: "%s | renoun docs template",
  },
  description: "Generated by create next app",
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const collections = await CollectionInfo.getEntries({
    recursive: true,
    includeIndexAndReadme: true,
  })

  for (const collection of collections) {
    const collectionEntries = (await collection.getEntries()).map((ele) =>
      ele.getAbsolutePath(),
    )
    console.log({ collection: collectionEntries })
  }

  //console.dir(collections)

  // here we're generating the items for the dropdown menu in the sidebar
  // it's used to provide a short link for the user to switch easily between the different collections
  // it expects an `index.mdx` file in each collection at the root level ( e.g. `aria-docs/index.mdx`)
  // const availableCollections = (
  //   await Promise.all(
  //     collections.map(async (collection) => {
  //       console.log(collection.getAbsolutePath())

  //       return {}
  //       // const indexFile = await collection.getFile("index", "mdx")

<<<<<<< Updated upstream
  //       // if (!indexFile) {
  //       //   return null
  //       // }
  //       // const frontmatter = await indexFile.getExportValueOrThrow("frontmatter")
=======
          const frontmatter = await indexFile.getExportValue("frontmatter")
>>>>>>> Stashed changes

  //       // return {
  //       //   name: frontmatter.title ?? indexFile.getTitle(),
  //       //   pattern: `/docs/${frontmatter.alias ?? collection.getPathSegments()[1]}/**`,
  //       // }
  //     }),
  //   )
  // ).filter((ele) => !!ele)

  // availableCollections.unshift({
  //   name: "All",
  //   pattern: "**/*",
  // })
  return (
    <html lang="en" suppressHydrationWarning>
      <head />
      <body>
        <PackageInstallScript />
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <Suspense fallback={<div />}>
            {/* <Navbar tabs={availableCollections} /> */}
          </Suspense>

          <SiteSidebar
            items={[]}
            collections={[]}
            activeCollection=""
            hideSwitcher={true}
            defaultHidden={true}
          />

          {children}
          <TailwindIndicator />
        </ThemeProvider>
      </body>
    </html>
  )
}
