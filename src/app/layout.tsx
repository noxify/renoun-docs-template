import type { Metadata } from "next"

import "./globals.css"

import { Suspense } from "react"
import { CollectionInfo } from "@/collections"
import { Navbar } from "@/components/main-navbar"
import { SiteSidebar } from "@/components/sidebar"
import { TailwindIndicator } from "@/components/tailwind-indicator"
import { ThemeProvider } from "@/components/theme-provider"
import { PackageInstallScript } from "renoun/components"

// import { isDirectory, isFile } from "renoun/file-system"

export const metadata: Metadata = {
  title: {
    default: "renoun docs template",
    template: "%s | renoun docs template",
  },
  description: "Generated by create next app",
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const collections = await CollectionInfo.getEntries({
    recursive: false,
    includeIndexAndReadme: true,
  })

  // here we're generating the items for the dropdown menu in the sidebar
  // it's used to provide a short link for the user to switch easily between the different collections
  // it expects an `index.mdx` file in each collection at the root level ( e.g. `aria-docs/index.mdx`)

  // const chooseableCollections = []

  for (const collection of collections) {
    const indexFile = await collection.getFileOrThrow("index", "mdx")
    const metadata = await indexFile.getExports()
    console.log({ indexFile, metadata })
  }
  // console.log(
  //   collections.map((entry) => ({
  //     pathSegments: entry.getPathSegments(),
  //     path: entry.getPath(),
  //     absolute: entry.getAbsolutePath(),
  //     hasFile: isFile(entry),
  //   })),
  // )
  // const availableCollections = await Promise.all(
  //   collections.map(async (collection) => {
  //     const indexFile = await collection.getEntry("/")

  //     if (!indexFile) {
  //       return null
  //     }

  //     console.log({ indexFile })

  //     return {
  //       name: indexFile.getTitle(),
  //     }
  //   }),
  // )

  // //availableCollections.unshift({ name: "All", pattern: "**/*" })
  return (
    <html lang="en" suppressHydrationWarning>
      <head />
      <body>
        <PackageInstallScript />
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <Suspense fallback={<div />}>
            <Navbar tabs={[]} />
          </Suspense>

          <SiteSidebar
            items={[]}
            collections={[]}
            activeCollection=""
            hideSwitcher={true}
            defaultHidden={true}
          />

          {children}
          <TailwindIndicator />
        </ThemeProvider>
      </body>
    </html>
  )
}
